---
title: "Case Olist"
author: "Nathalia"
date: today
format: html
toc: true
toc-title: "Tópicos" 
lang: "pt"
code-fold: true
editor_options: 
  chunk_output_type: console
execute:
  warning: false
jupyter: python3
---

```{r}
rm(list = ls())
library(readr)
library(tidyverse)
```

```{r}
## PAGAMENTOS
df_pagamentos <-  read_csv(  "olist_dados/archive/olist_order_payments_dataset.csv")
pag_mais_freq <- df_pagamentos %>% 
  group_by(payment_type) %>% summarise(n = n()) %>% 
  filter(n == max(n)) %>% pull(payment_type)
df_pagamentos <- df_pagamentos %>% 
  mutate(
    payment_type = if_else(payment_type == "not_defined", pag_mais_freq, payment_type)
  )

df_forma_pag <- df_pagamentos %>% # Forma de pagamento
  group_by(order_id, payment_type) %>% 
  summarise(
    n = n()
  ) %>% pivot_wider(
    names_from = payment_type, values_from = n, names_prefix = 'TipoPag_', values_fill = 0
  ) %>% mutate(
    soma_tipos_pagamentos = sum(c_across(starts_with("TipoPag_")))
  )

df_registro <- df_pagamentos %>% # Registro pag
  group_by(order_id) %>% 
  summarise(
    log_valor_pago = log(sum(payment_value)),
    pago_a_vista = if_else(max(payment_sequential)==1, "Sim", "Nao"),
    log_valor_medio_parcela = log(mean(payment_value))
  )

## PEDIDOS - tirar os cancelados?
df_pedidos <- read_csv("olist_dados/archive/olist_orders_dataset.csv")
data_atual <- as.Date("2018-05-31")
df_pedidos <- df_pedidos %>% 
  mutate(
    dia_pedido = weekdays(order_purchase_timestamp),
    tempo_conf_pedido = case_when(
      is.na(order_approved_at) ~ 
        as.numeric(difftime(data_atual, order_purchase_timestamp, units = "days")),
      TRUE ~ as.numeric(difftime(order_approved_at, order_purchase_timestamp, units = "days"))
      ),
    atraso_prev_entrega = case_when(
      is.na(order_estimated_delivery_date) & 
        as.numeric(difftime(data_atual, order_delivered_customer_date, units = "days")) <= 0 ~ "Sim",
      !is.na(order_estimated_delivery_date) & 
        as.numeric(difftime(order_estimated_delivery_date, order_delivered_customer_date, units = "days")) <= 0 ~ "Sim",
      TRUE ~ "Nao"
    )
  )

df_pedidos%>% summary()

## CLIENTES
df_cliente <- read_csv("olist_dados/archive/olist_customers_dataset.csv")
df_cliente <- df_cliente %>% mutate(
  regiao_cliente = case_when(
    customer_state %in% c("SP") ~ "SP",
    customer_state %in% c("SP", "MG", "RJ", "ES") ~ "Sudeste-SP",
    customer_state %in% c("PR", "RS", "MS") ~ "Sul",
    customer_state %in% c("DF", "GO", "MT") ~ "Sul",
    TRUE ~ "NorteNordeste"
  )
)
df_cliente$regiao_cliente %>% table()

df_cliente%>% summary()

#df_local <- read_csv("olist_dados/archive/olist_geolocation_dataset.csv")
df_avalia <- read_csv("olist_dados/archive/olist_order_reviews_dataset.csv")
df_avalia <- df_avalia %>% 
  mutate(
    len_titulo = df_avalia$review_comment_title %>% nchar() %>% replace_na(0),
    len_comentario = df_avalia$review_comment_message %>% nchar() %>% replace_na(0),
    comentario_exc = ifelse(is.na(df_avalia$review_comment_message), 0, str_count(df_avalia$review_comment_message, fixed("!")))# contar ! como + e  como neg, linhas de ex: 755 e 812 
  ) %>% 
  mutate(
    colocou_titulo = ifelse(len_titulo > 0 , "Sim", "Nao"),
    colocou_exc = ifelse(comentario_exc > 0 , "Sim", "Nao")
  )

df_avalia %>% filter(comentario_exc > 100) %>% select(review_comment_message)

df_ordem_compra <- 
  df_forma_pag %>% inner_join(df_registro, join_by(order_id)) %>% # Pagamentos
  inner_join(df_pedidos, join_by(order_id)) %>% 
  inner_join(df_avalia, join_by(order_id)) %>% 
  inner_join(df_cliente, join_by(customer_id)) # Cliente

# ordem primeira compra: df_ordem_compra, summarise_if (acumulada)
df_ordem_primeira_compra <- df_ordem_compra %>% 
  group_by(customer_unique_id) %>% 
  summarise(
    data_prim_compra = min(order_purchase_timestamp),
    data_ultima_compra = max(order_purchase_timestamp),
    primeira_compra_cliente = if_else(n()>1, 'Sim', 'Nao')
    )

df_ordem_compra_fim <- df_ordem_compra %>% 
  inner_join(df_ordem_primeira_compra, join_by(customer_unique_id)) %>% 
  mutate(
  primeira_ordem_por_cliente = case_when(
    data_prim_compra == order_purchase_timestamp ~ 'Primeira',
    data_ultima_compra == order_purchase_timestamp ~ 'Ultima',
    TRUE ~ '2oumais' #data_prim_compra < order_purchase_timestamp && data_ultima_compra < order_purchase_timestamp
  )
)


########
df_items <- read_csv("olist_dados/archive/olist_order_items_dataset.csv")
df_items <- df_items %>% mutate(
  log_price = log(df_items$price),
  log_frete = log(df_items$freight_value+1)
)

df_items %>% group_by(order_id) %>% 
  summarise(
    produtos_por_pedido = n()
  )


df_prod <- read_csv("olist_dados/archive/olist_products_dataset.csv")
# Criar a coluna 'categorias_novas_produtos' com base em condições
df_prod <- df_prod %>%
  mutate(categorias_novas_produtos = case_when(
    grepl("ferramentas", product_category_name, ignore.case = TRUE) ~ "CONSTRUCAO_FERRAMENTAS",
    grepl("fashion_", product_category_name, ignore.case = TRUE) ~ "FASHION",
    grepl("moveis_", product_category_name, ignore.case = TRUE) ~ "MOVEIS",
    grepl("eletrodomesticos", product_category_name, ignore.case = TRUE) ~ "ELETRODOMESTICOS",
    grepl("dvd", product_category_name, ignore.case = TRUE) ~ "MIDIA-MUSICA",
    grepl("pc", product_category_name, ignore.case = TRUE) ~ "INFORMATICA_ACESSORIOS",
    grepl("industria", product_category_name, ignore.case = TRUE) ~ "INDUSTRIA",
    grepl("musica", product_category_name, ignore.case = TRUE) ~ "MIDIA-MUSICA",
    grepl("portateis", product_category_name, ignore.case = TRUE) ~ "PORTATEIS",
    grepl("livros", product_category_name, ignore.case = TRUE) ~ "PAPELARIA",
    grepl("telefonia", product_category_name, ignore.case = TRUE) ~ "TELEFONIA",
    grepl("artigo", product_category_name, ignore.case = TRUE) ~ "EVENTO",
    grepl("casa", product_category_name, ignore.case = TRUE) ~ "CASA",
    grepl("artes", product_category_name, ignore.case = TRUE) ~ "ARTESANATO-LEGAL",
    grepl("segur", product_category_name, ignore.case = TRUE) ~ "SEGURANCA",
    grepl("bebida", product_category_name, ignore.case = TRUE) ~ "ALIMENTO",
    TRUE ~ product_category_name  # Caso nenhuma das condições seja atendida
  ))

# Substituir valores específicos na coluna 'categorias_novas_produtos'
df_prod <- df_prod %>%
  mutate(categorias_novas_produtos = recode(categorias_novas_produtos,
    "papelaria" = "PAPELARIA",
    "cine_foto" = "MIDIA-MUSICA",
    "fraldas_higiene" = "BEBES",
    "audio" = "MIDIA-MUSICA",
    "consoles_games" = "PC",
    "alimentos" = "ALIMENTO",
    "flores" = "ALIMENTO",
    "casa_construcao" = "CONSTRUCAO_FERRAMENTAS",
    "eletroportateis" = "PORTATEIS",
    "utilidades_domesticas" = "CASA",
    "cama_mesa_banho" = "CASA",
    "climatizacao" = "CASA",
    "la_cuisine" = "CASA",
    "eletronicos" = "INFORMATICA_ACESSORIOS",
    "tablets_impressao_imagem" = "INFORMATICA_ACESSORIOS",
    "cool_stuff" = "ARTESANATO-LEGAL"
  ))

# Converter para maiúsculas
df_prod$categorias_novas_produtos <- toupper(df_prod$categorias_novas_produtos)


df_prod %>% summary()

df_logista <- read_csv("olist_dados/archive/olist_sellers_dataset.csv")

df_compra = df_prod %>%
  inner_join(df_items, join_by(product_id))
df_compra

########
df <- df_ordem_compra_fim %>%
  inner_join(df_compra, join_by(order_id))

##########
df_ordem_compra_fim %>% 
  ggplot(aes(y = len_comentario, x = as_factor(review_score), fill = colocou_titulo)) +
  geom_boxplot()

df_ordem_compra_fim %>% 
  ggplot(aes(y = len_comentario, x = as_factor(review_score), fill = colocou_exc)) +
  geom_boxplot()

# Logo, atraso na entrega, regiao_cliente nao interfere tanto
df_ordem_compra_fim %>% 
  ggplot(aes(y = len_comentario, x = as_factor(review_score), fill = primeira_compra_cliente)) +
  geom_boxplot()

df_ordem_compra_fim %>% 
  ggplot(aes(y = log_valor_medio_parcela, x = as_factor(review_score), fill = primeira_ordem_por_cliente)) +
  geom_boxplot()

quant_dia <- df %>% # valor da no msm
  group_by(dia = as.Date(order_purchase_timestamp)) %>% 
  summarise(
    n = n()
  )

plot(
  x = t(quant_dia$dia),
  y = quant_dia$n,
  type = 'l'
)


```

\newpage

# Dados
```{r}
library(reticulate)
reticulate::use_condaenv("base", required = TRUE)

library(tidyverse)
```


```{r}
mtcars
```


# Tratamento dos Dados
```{python}
x = 3
x += 1
print(x)
```

